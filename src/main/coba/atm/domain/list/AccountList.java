package coba.atm.domain.list;

import coba.atm.domain.Account;
import coba.atm.domain.CommonEntity;
import coba.atm.exception.AccountNotFoundException;
import coba.atm.exception.ValidationErrorException;
import coba.atm.util.PasswordUtil;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import static coba.atm.constants.AppConstants.ERR_INVALID_ACCOUNT;

/**
 * Dummy data store.
 * Initial data will always contain;
 * Name : John Doe
 * PIN : 012108
 * Balance : $100
 * Account Number: 112233
 * --
 * Name : Jane Doe
 * PIN : 932012
 * Balance : $30
 * Account Number: 112244
 */
public class AccountList {

    public AccountList() {
        accList = Arrays.asList(
                new Account(1L, LocalDateTime.now(), "John Doe", "112233", new PasswordUtil().encode("012108"), new BigDecimal("100")),
                new Account(2L, LocalDateTime.now(), "Jane Doe", "112244", new PasswordUtil().encode("932012"), new BigDecimal("30"))
        );
    }

    private List<Account> accList = null;

    public List<Account> select() {
        return accList;
    }

    /**
     * Find Account by id {@link Account}
     *
     * @param id of Account
     * @return Account
     */
    public Account find(long id) {
        return find(id, true);
    }

    private Account find(long id, boolean copyObj){
        Comparator<Account> idCmp = Comparator.comparing(CommonEntity::getId);
        int idx = Collections.binarySearch(accList, new Account(id), idCmp);
        if (idx >= 0) return copyObj ? new Account(accList.get(idx)) : accList.get(idx);
        return null;
    }

    /**
     * Find Account by accountNumber {@link Account}
     *
     * @param accNum of Account
     * @return Account
     */
    public Account findByAccountNumber(String accNum) throws ValidationErrorException, AccountNotFoundException {
        if(!Account.checkAccountNum(accNum)) {
            throw new ValidationErrorException();
        }
        Comparator<Account> idCmp = Comparator.comparing(Account::getAccountNumber);
        int idx = Collections.binarySearch(accList, new Account(accNum), idCmp);
        if (idx >= 0) return new Account(accList.get(idx));

        System.out.println(ERR_INVALID_ACCOUNT);
        throw new AccountNotFoundException(ERR_INVALID_ACCOUNT);
    }

    /**
     * Save or update accList based on id, if null do save with autogenerated id.
     * Otherwise, update accList.
     * @param account {@link Account}
     */
    public void save(Account account){
        if(account.getId() != null){
            Account old = find(account.getId(), false);
            accList.set(accList.indexOf(old), account);
        } else {
            long newId = accList.get(accList.size()-1).getId() + 1;
            account.setId(newId);
            accList.add(account);
        }
    }

    public void saves(Account... accounts){
        for(Account a : accounts){
            save(a);
        }
    }

}
